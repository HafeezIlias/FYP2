{"version":3,"file":"src_models_Hiker_js.bundle.js","mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD,kDAAkD;AAClD,6BAA6B;AAC7B;AACA;AACA;AACA,oCAAoC;AACpC,iCAAiC;AACjC,kCAAkC;AAClC,uDAAuD;AACvD;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,KAAK,EAAC","sources":["webpack://fyp2/./src/models/Hiker.js"],"sourcesContent":["/**\r\n * Hiker Model - Represents a hiker entity\r\n */\r\nclass Hiker {\r\n  /**\r\n   * Create a new Hiker\r\n   * @param {number} id - Unique identifier\r\n   * @param {string} name - Hiker's name\r\n   * @param {number} lat - Latitude coordinate\r\n   * @param {number} lon - Longitude coordinate\r\n   * @param {string} status - Current status (Active, Resting, SOS)\r\n   * @param {number} battery - Battery percentage (0-100)\r\n   * @param {number} lastUpdate - Timestamp of last update\r\n   * @param {boolean} sos - Whether in SOS mode\r\n   */\r\n  constructor(id, name, lat, lon, status = 'Active', battery = 100, lastUpdate = Date.now(), sos = false) {\r\n    this.id = id;\r\n    this.name = name;\r\n    this.lat = lat;\r\n    this.lon = lon;\r\n    this.status = status;\r\n    this.battery = battery;\r\n    this.lastUpdate = lastUpdate;\r\n    this.sos = sos;\r\n    \r\n    // Notification flags\r\n    this.sosNotified = false;\r\n    this.batteryNotified = false;\r\n    \r\n    // SOS handling\r\n    this.sosHandled = false;\r\n    this.sosHandledTime = null;\r\n    this.sosEmergencyDispatched = false;\r\n    this.sosEmergencyTime = null;\r\n\r\n    // Simulation properties\r\n    this.speed = 0.0001 + Math.random() * 0.0002; // Random movement speed\r\n    this.direction = Math.random() * Math.PI * 2; // Random direction in radians\r\n    this.directionalBias = { // Tendency to go in certain direction\r\n      lat: Math.random() * 0.6 - 0.3,\r\n      lon: Math.random() * 0.6 - 0.3\r\n    };\r\n    this.movementProbability = 0.9; // 90% chance to move each update\r\n    this.restProbability = 0.05; // 5% chance to rest if active\r\n    this.resumeProbability = 0.3; // 30% chance to resume if resting\r\n    this.batteryDrainRate = 0.1 + Math.random() * 0.3; // Random battery drain (0.1-0.4% per update)\r\n  }\r\n  \r\n  /**\r\n   * Update hiker data with new position for live data\r\n   * @param {number} lat - New latitude\r\n   * @param {number} lon - New longitude\r\n   * @param {number} battery - New battery level\r\n   * @param {string} status - New status\r\n   */\r\n  updateData(lat, lon, battery, status = 'Active') {\r\n    this.lat = lat;\r\n    this.lon = lon;\r\n    this.battery = battery;\r\n    this.status = status;\r\n    this.lastUpdate = Date.now();\r\n  }\r\n\r\n  /**\r\n   * Update position for simulation\r\n   */\r\n  updatePosition() {\r\n    // Don't update position if in SOS mode\r\n    if (this.sos) return;\r\n    \r\n    // Drain battery\r\n    this.battery = Math.max(0, this.battery - this.batteryDrainRate);\r\n    \r\n    // Update status based on probabilities\r\n    if (this.status === 'Active' && Math.random() < this.restProbability) {\r\n      this.status = 'Resting';\r\n    } else if (this.status === 'Resting' && Math.random() < this.resumeProbability) {\r\n      this.status = 'Active';\r\n    }\r\n    \r\n    // Only move if active and probability check passes\r\n    if (this.status === 'Active' && Math.random() < this.movementProbability) {\r\n      // Slightly change direction (wander)\r\n      this.direction += (Math.random() - 0.5) * 0.5;\r\n      \r\n      // Calculate movement with directional bias\r\n      const latChange = Math.sin(this.direction) * this.speed + this.directionalBias.lat * 0.00002;\r\n      const lonChange = Math.cos(this.direction) * this.speed + this.directionalBias.lon * 0.00002;\r\n      \r\n      // Update coordinates\r\n      this.lat = parseFloat(this.lat) + latChange;\r\n      this.lon = parseFloat(this.lon) + lonChange;\r\n    }\r\n    \r\n    // Random chance for SOS (1% when battery below 30%, 0.2% otherwise)\r\n    if (!this.sos) {\r\n      const sosProbability = this.battery < 30 ? 0.01 : 0.002;\r\n      if (Math.random() < sosProbability) {\r\n        this.setSosStatus(true);\r\n      }\r\n    }\r\n    \r\n    // Update last update timestamp\r\n    this.lastUpdate = Date.now();\r\n  }\r\n  \r\n  /**\r\n   * Mark SOS as handled\r\n   */\r\n  markSosHandled() {\r\n    if (this.sos && !this.sosHandled) {\r\n      this.sosHandled = true;\r\n      this.sosHandledTime = Date.now();\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  \r\n  /**\r\n   * Mark emergency services dispatched\r\n   */\r\n  dispatchEmergencyServices() {\r\n    if (this.sos && !this.sosEmergencyDispatched) {\r\n      this.sosEmergencyDispatched = true;\r\n      this.sosEmergencyTime = Date.now();\r\n      // Also mark as handled\r\n      this.sosHandled = true;\r\n      this.sosHandledTime = this.sosHandledTime || Date.now();\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  \r\n  /**\r\n   * Format time for display\r\n   * @param {number} timestamp - Timestamp to format\r\n   * @returns {string} Formatted time string\r\n   */\r\n  static formatTime(timestamp) {\r\n    if (!timestamp) return '';\r\n    return new Date(timestamp).toLocaleTimeString();\r\n  }\r\n  \r\n  /**\r\n   * Get SOS status text\r\n   * @returns {string} Status text\r\n   */\r\n  getSosStatusText() {\r\n    if (!this.sos) return 'No SOS Active';\r\n    if (this.sosEmergencyDispatched) return 'Emergency Services Dispatched';\r\n    if (this.sosHandled) return 'Handled';\r\n    return 'Pending';\r\n  }\r\n  \r\n  /**\r\n   * Reset SOS status\r\n   * @returns {boolean} Whether the status was successfully reset\r\n   */\r\n  resetSosStatus() {\r\n    if (!this.sos) return false; // Already not in SOS state\r\n    \r\n    this.sos = false;\r\n    this.status = 'Active';\r\n    this.sosHandled = false;\r\n    this.sosHandledTime = null;\r\n    this.sosEmergencyDispatched = false;\r\n    this.sosEmergencyTime = null;\r\n    this.sosNotified = false;\r\n    \r\n    return true;\r\n  }\r\n  \r\n  /**\r\n   * Set SOS status\r\n   * @param {boolean} sosState - New SOS state\r\n   */\r\n  setSosStatus(sosState) {\r\n    if (sosState === this.sos) return false;\r\n    \r\n    this.sos = sosState;\r\n    if (sosState) {\r\n      this.status = 'SOS';\r\n      this.sosHandled = false;\r\n      this.sosHandledTime = null;\r\n      this.sosEmergencyDispatched = false;\r\n      this.sosEmergencyTime = null;\r\n    } else {\r\n      this.status = 'Active';\r\n    }\r\n    \r\n    return true;\r\n  }\r\n}\r\n\r\n// Export the Hiker model\r\nexport default Hiker; "],"names":[],"sourceRoot":""}