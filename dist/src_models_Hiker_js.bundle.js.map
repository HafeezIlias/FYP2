{"version":3,"file":"src_models_Hiker_js.bundle.js","mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD,kDAAkD;AAClD,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,MAAM,iCAAiC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,KAAK,EAAC","sources":["webpack://fyp2/./src/models/Hiker.js"],"sourcesContent":["/**\r\n * Hiker Model - Represents a hiker entity with movement simulation\r\n */\r\nclass Hiker {\r\n  /**\r\n   * Create a new Hiker\r\n   * @param {number} id - Unique identifier\r\n   * @param {string} name - Hiker's name\r\n   * @param {number} lat - Latitude coordinate\r\n   * @param {number} lon - Longitude coordinate\r\n   * @param {string} status - Current status (Active, Moving, Resting, SOS)\r\n   * @param {number} battery - Battery percentage (0-100)\r\n   * @param {number} lastUpdate - Timestamp of last update\r\n   * @param {boolean} sos - Whether in SOS mode\r\n   */\r\n  constructor(id, name, lat, lon, status = 'Active', battery = 100, lastUpdate = Date.now(), sos = false) {\r\n    this.id = id;\r\n    this.name = name;\r\n    this.lat = lat;\r\n    this.lon = lon;\r\n    this.status = status;\r\n    this.battery = battery;\r\n    this.lastUpdate = lastUpdate;\r\n    this.sos = sos;\r\n    \r\n    // For simulated movement\r\n    this.speed = Math.random() * 0.0002 + 0.00005; // random speed\r\n    this.direction = Math.random() * Math.PI * 2; // random direction\r\n    this.movementPause = Math.random() > 0.7; // 30% chance to be stationary initially\r\n    this.pauseDuration = 0;\r\n    \r\n    // Notification flags\r\n    this.sosNotified = false;\r\n    this.batteryNotified = false;\r\n    \r\n    // Settings control\r\n    this.enableSos = true; // Can be disabled via settings\r\n    \r\n    // SOS handling\r\n    this.sosHandled = false;\r\n    this.sosHandledTime = null;\r\n    this.sosEmergencyDispatched = false;\r\n    this.sosEmergencyTime = null;\r\n  }\r\n  \r\n  /**\r\n   * Update hiker position for simulation\r\n   */\r\n  updatePosition() {\r\n    // SOS doesn't move\r\n    if (this.sos) return;\r\n    \r\n    // Handle pausing\r\n    if (this.movementPause) {\r\n      this.pauseDuration++;\r\n      if (this.pauseDuration > 10) { // Resume after ~10 seconds\r\n        this.movementPause = false;\r\n        this.pauseDuration = 0;\r\n        this.status = 'Moving';\r\n      } else {\r\n        this.status = 'Resting';\r\n        return;\r\n      }\r\n    } else if (Math.random() > 0.95) { // 5% chance to pause\r\n      this.movementPause = true;\r\n      this.status = 'Resting';\r\n      return;\r\n    }\r\n    \r\n    // Random slight direction change\r\n    this.direction += (Math.random() - 0.5) * 0.2;\r\n    \r\n    // Update coordinates based on direction and speed\r\n    this.lat += Math.sin(this.direction) * this.speed;\r\n    this.lon += Math.cos(this.direction) * this.speed;\r\n    \r\n    // Update battery (decreases more when moving)\r\n    this.battery = Math.max(0, this.battery - Math.random() * 0.3);\r\n    \r\n    // Update timestamp\r\n    this.lastUpdate = Date.now();\r\n    \r\n    // Random SOS event (only if enabled in settings)\r\n    if (this.enableSos && Math.random() > 0.997) { // Very rare SOS event\r\n      this.sos = true;\r\n      this.status = 'SOS';\r\n      // Reset handling status\r\n      this.sosHandled = false;\r\n      this.sosHandledTime = null;\r\n      this.sosEmergencyDispatched = false;\r\n      this.sosEmergencyTime = null;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Mark SOS as handled\r\n   */\r\n  markSosHandled() {\r\n    if (this.sos && !this.sosHandled) {\r\n      this.sosHandled = true;\r\n      this.sosHandledTime = Date.now();\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  \r\n  /**\r\n   * Mark emergency services dispatched\r\n   */\r\n  dispatchEmergencyServices() {\r\n    if (this.sos && !this.sosEmergencyDispatched) {\r\n      this.sosEmergencyDispatched = true;\r\n      this.sosEmergencyTime = Date.now();\r\n      // Also mark as handled\r\n      this.sosHandled = true;\r\n      this.sosHandledTime = this.sosHandledTime || Date.now();\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  \r\n  /**\r\n   * Format time for display\r\n   * @param {number} timestamp - Timestamp to format\r\n   * @returns {string} Formatted time string\r\n   */\r\n  static formatTime(timestamp) {\r\n    if (!timestamp) return '';\r\n    return new Date(timestamp).toLocaleTimeString();\r\n  }\r\n  \r\n  /**\r\n   * Get SOS status text\r\n   * @returns {string} Status text\r\n   */\r\n  getSosStatusText() {\r\n    if (!this.sos) return 'No SOS Active';\r\n    if (this.sosEmergencyDispatched) return 'Emergency Services Dispatched';\r\n    if (this.sosHandled) return 'Handled';\r\n    return 'Pending';\r\n  }\r\n  \r\n  /**\r\n   * Reset SOS status\r\n   * @returns {boolean} Whether the status was successfully reset\r\n   */\r\n  resetSosStatus() {\r\n    if (!this.sos) return false; // Already not in SOS state\r\n    \r\n    this.sos = false;\r\n    this.status = 'Active';\r\n    this.sosHandled = false;\r\n    this.sosHandledTime = null;\r\n    this.sosEmergencyDispatched = false;\r\n    this.sosEmergencyTime = null;\r\n    this.sosNotified = false;\r\n    \r\n    return true;\r\n  }\r\n}\r\n\r\n// Export the Hiker model\r\nexport default Hiker; "],"names":[],"sourceRoot":""}