{"version":3,"file":"src_models_Hiker_js.bundle.js","mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kDAAkD;AAClD,kDAAkD;AAClD,6BAA6B;AAC7B;AACA;AACA;AACA,oCAAoC;AACpC,iCAAiC;AACjC,kCAAkC;AAClC,uDAAuD;AACvD;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iEAAe,KAAK,EAAC","sources":["webpack://fyp2/./src/models/Hiker.js"],"sourcesContent":["/**\n * Hiker Model - Represents a hiker entity\n */\nclass Hiker {\n  /**\n   * Create a new Hiker\n   * @param {number} id - Unique identifier\n   * @param {string} name - Hiker's name\n   * @param {number} lat - Latitude coordinate\n   * @param {number} lon - Longitude coordinate\n   * @param {string} status - Current status (Active, Resting, SOS)\n   * @param {number} battery - Battery percentage (0-100)\n   * @param {number} lastUpdate - Timestamp of last update\n   * @param {boolean} sos - Whether in SOS mode\n   */\n  constructor(id, name, lat, lon, status = 'Active', battery = 100, lastUpdate = Date.now(), sos = false) {\n    this.id = id;\n    this.name = name;\n    this.lat = lat;\n    this.lon = lon;\n    this.status = status;\n    this.battery = battery;\n    this.lastUpdate = lastUpdate;\n    this.sos = sos;\n    \n    // Notification flags\n    this.sosNotified = false;\n    this.batteryNotified = false;\n    \n    // SOS handling\n    this.sosHandled = false;\n    this.sosHandledTime = null;\n    this.sosEmergencyDispatched = false;\n    this.sosEmergencyTime = null;\n\n    // Simulation properties\n    this.speed = 0.0001 + Math.random() * 0.0002; // Random movement speed\n    this.direction = Math.random() * Math.PI * 2; // Random direction in radians\n    this.directionalBias = { // Tendency to go in certain direction\n      lat: Math.random() * 0.6 - 0.3,\n      lon: Math.random() * 0.6 - 0.3\n    };\n    this.movementProbability = 0.9; // 90% chance to move each update\n    this.restProbability = 0.05; // 5% chance to rest if active\n    this.resumeProbability = 0.3; // 30% chance to resume if resting\n    this.batteryDrainRate = 0.1 + Math.random() * 0.3; // Random battery drain (0.1-0.4% per update)\n  }\n  \n  /**\n   * Update hiker data with new position for live data\n   * @param {number} lat - New latitude\n   * @param {number} lon - New longitude\n   * @param {number} battery - New battery level\n   * @param {string} status - New status\n   */\n  updateData(lat, lon, battery, status = 'Active') {\n    this.lat = lat;\n    this.lon = lon;\n    this.battery = battery;\n    this.status = status;\n    this.lastUpdate = Date.now();\n  }\n\n  /**\n   * Update position for simulation\n   */\n  updatePosition() {\n    // Don't update position if in SOS mode\n    if (this.sos) return;\n    \n    // Drain battery\n    this.battery = Math.max(0, this.battery - this.batteryDrainRate);\n    \n    // Update status based on probabilities\n    if (this.status === 'Active' && Math.random() < this.restProbability) {\n      this.status = 'Resting';\n    } else if (this.status === 'Resting' && Math.random() < this.resumeProbability) {\n      this.status = 'Active';\n    }\n    \n    // Only move if active and probability check passes\n    if (this.status === 'Active' && Math.random() < this.movementProbability) {\n      // Slightly change direction (wander)\n      this.direction += (Math.random() - 0.5) * 0.5;\n      \n      // Calculate movement with directional bias\n      const latChange = Math.sin(this.direction) * this.speed + this.directionalBias.lat * 0.00002;\n      const lonChange = Math.cos(this.direction) * this.speed + this.directionalBias.lon * 0.00002;\n      \n      // Update coordinates\n      this.lat = parseFloat(this.lat) + latChange;\n      this.lon = parseFloat(this.lon) + lonChange;\n    }\n    \n    // Random chance for SOS (1% when battery below 30%, 0.2% otherwise)\n    if (!this.sos) {\n      const sosProbability = this.battery < 30 ? 0.01 : 0.002;\n      if (Math.random() < sosProbability) {\n        this.setSosStatus(true);\n      }\n    }\n    \n    // Update last update timestamp\n    this.lastUpdate = Date.now();\n  }\n  \n  /**\n   * Handle SOS - unified method for SOS response\n   */\n  handleSos() {\n    if (this.sos && !this.sosHandled) {\n      this.sosHandled = true;\n      this.sosHandledTime = Date.now();\n      // Also dispatch emergency services\n      this.sosEmergencyDispatched = true;\n      this.sosEmergencyTime = Date.now();\n      return true;\n    }\n    return false;\n  }\n  \n  /**\n   * Format time for display\n   * @param {number} timestamp - Timestamp to format\n   * @returns {string} Formatted time string\n   */\n  static formatTime(timestamp) {\n    if (!timestamp) return '';\n    return new Date(timestamp).toLocaleTimeString();\n  }\n  \n  /**\n   * Get SOS status text\n   * @returns {string} Status text\n   */\n  getSosStatusText() {\n    if (!this.sos) return 'No SOS Active';\n    if (this.sosHandled) return 'Help On The Way';\n    return 'Pending Response';\n  }\n  \n  /**\n   * Reset SOS status\n   * @returns {boolean} Whether the status was successfully reset\n   */\n  resetSosStatus() {\n    if (!this.sos) return false; // Already not in SOS state\n    \n    this.sos = false;\n    this.status = 'Active';\n    this.sosHandled = false;\n    this.sosHandledTime = null;\n    this.sosEmergencyDispatched = false;\n    this.sosEmergencyTime = null;\n    this.sosNotified = false;\n    \n    return true;\n  }\n  \n  /**\n   * Set SOS status\n   * @param {boolean} sosState - New SOS state\n   */\n  setSosStatus(sosState) {\n    if (sosState === this.sos) return false;\n    \n    this.sos = sosState;\n    if (sosState) {\n      this.status = 'SOS';\n      this.sosHandled = false;\n      this.sosHandledTime = null;\n      this.sosEmergencyDispatched = false;\n      this.sosEmergencyTime = null;\n    } else {\n      this.status = 'Active';\n    }\n    \n    return true;\n  }\n}\n\n// Export the Hiker model\nexport default Hiker; "],"names":[],"sourceRoot":""}